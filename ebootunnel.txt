코딩테스트 - 문제 해결을 위한 창의적 알고리즘 중급 사용 

지민  
김형기  010-6638-3946  giroro3946@gmail.com 

문제해결을 위한 창의적 알고리즘 중급

Part II. 탐색기반 알고리즘의 설계

4. 탐색 
5. 전체탐색법
6. 탐색공간의 배제 중

4. 탐색 부분 

4. 탐색 (p.38)

선형구조의 탐색 
순차 탐색
일반적 방법, 전체 탐색법
처음부터 끝까지 하나씩 순서대로 탐색
O(N)
이분 탐색 
오름차순 혹은 내림차순 정렬된 선형구조
절반으로 나눠서 탐색
O(logN)

문제3 - linear structure search
n개로 이루어진 정수 집합에서 원하는 수의 위치를 찾으시오.
단, 입력되는 집합은 오름차순으로 정렬되어 있으며, 같은 수는 없다.

[입력]
첫 줄에 한 정수 n이 입력된다. 둘째 줄에 n개의 정수가 공백으로 구분되어 입력된다. n개의 정수는 오름차순으로 정렬되어 있다. 셋째 줄에는 찾고자 하는 수가 입력된다.
(단, 2 <= n <= 1,000,000 , 각 원소의 크기는 100,000,000을 넘지 않는다.)

[출력]
찾고자 하는 원소의 위치를 출력한다. 없으면 -1을 출력한다.

입력 예
출력 예
8 
1 2 3 5 7 9 11 15
11
7
3 
2 5 7
3
‐1


[풀이1] 순차탐색 이용 
[풀이2] 이분탐색 이용 
Online Compiler 이용 : https://www.programiz.com/javascript/online-compiler/

STEP 1. 다음 형식을 이용한다.
function solution(inputs) {
  // 이부분을 채운다 
  return 1;
}

// 입력값
const inputs = []; 

// 출력값
const result = solution(inputs);

// 확인
console.log(result);



STEP 2. 입력과 출력이 제대로 나오는지 확인한다.
function solution(n, arr, wantedValue) {
  // 이부분을 채운다 
  let result = 7;
  return result;
}

// 입력값
let n = 8;
const arr = [1, 2, 3, 5, 7, 9, 11, 15];
let wantedValue = 11; 

// 출력값
const result = solution(n, arr, wantedValue);

// 확인
console.log(result);


STEP 3. 함수를 완성한다 - 순차탐색

function solution(n, arr, wantedValue) {
    const result = arr.indexOf(wantedValue);
    return result+1;
}


혹은 for 반복문을 사용
function solution(n, arr, wantedValue) {
    for(let i = 0; i < n; i++) {
        if(arr[i] === wantedValue) {
            return i+1;
        }
    }
    return -1;
}



STEP 4. 함수를 발전시킨다 - 더 나은 방법, 이진탐색

function solution(n, arr, wantedValue) {
    let left = 0;
    let right = n - 1;
    
    while(left <= right) {
        let mid = Math.floor((left + right) / 2);
        
        if(arr[mid] === wantedValue) {
            return mid+1;
        }
        
        if(arr[mid] < wantedValue) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    
    return -1;
}


STEP 5. Lower Bound 확인 [1, 2, 2, 2, 3, 4] 의 경우 2 를 찾는다면 2, 3, 4 중 어느것을 반환해야 하나? lower 면 2를, upper 면 4를 반환한다.

function solution(n, arr, wantedValue) {
    let left = 0;
    let right = n;  // n-1이 아닌 n까지로 설정
    
    while(left < right) {  // <= 가 아닌 < 사용
        let mid = Math.floor((left + right) / 2);
        
        if(arr[mid] >= wantedValue) {  // 같거나 큰 경우
            right = mid;
        } else {
            left = mid + 1;
        }
    }
    
    // 찾은 위치의 값이 wantedValue와 같은지 확인
    return (left < n && arr[left] === wantedValue) ? left+1 : -1;
}


Math.floor() : 소수점이하 버림, 5.1, 5.9 -> 5
Math.ceil() : 소수점이하 올림, 5.1, 5.9 -> 6
Math.round() : 반올림, 5.1, 5.9 -> 5, 6

자료구조란? Data Structure (DS) 로, 컴퓨터에서 데이터를 효율적으로 저장하고 관리하는 방법
DS, DSA(Data Structure and Algorithms) 는 CS의 공통어
DSA 는 “데이터를 정리하는 방법과 문제를 해결하는 방법”


문제1 (p.77) - 두더지 굴 

정올이는 땅속의 굴이 모두 연결되어 있으면 이 굴은 한 마리의 두더지가 사는 집이라는 사실을 발견하였다.
정올이는 뒷산에 사는 두더지가 모두 몇 마리인지 궁금해졌다. 정올이는 특수 장비를 이용하여 뒷산의 두더지 굴을 모두 나타낸 지도를 만들 수 있었다.
이 지도는 직사각형이고 가로 세로 영역을 0 또는 1로 표현한다. 0은 땅이고 1은두더지 굴을 나타낸다. 1이 상하좌우로 연결되어 있으면 한 마리의 두더지가 사는집으로 정의할 수 있다

[그림 2]는 [그림 1]을 두더지 굴로 번호를 붙인 것이다. 특수촬영 사진 데이터를 입력받아 두더지 굴의 수를 출력하고, 각 두더지 굴의 크기를 오름차순으로 정렬하여출력하는 프로그램을 작성하시오.

[입력]
첫 번째 줄에 가로, 세로의 크기를 나타내는 n이 입력된다.(n은 30이하의 자연수)두 번째 줄부터 n줄에 걸쳐서 n개의 0과 1이 공백으로 구분되어 입력된다.

[출력]
첫째 줄에 두더지 굴의 수를 출력한다. 둘째 줄부터 각 두더지 굴의 크기를 내림차순으로 한 줄에 하나씩 출력한다.

입력 예
출력 예
7
0 1 1 0 1 0 0
0 1 1 0 1 0 1
1 1 1 0 1 0 1
0 0 0 0 1 1 1
0 1 0 0 0 0 0
0 1 1 1 1 1 0
0 1 1 1 0 0 0
3
9
8
7



풀이1 - 무조건 풀어보기 

처음 만나는 1 이 있는 곳을 2로 바꾼다.
2의 상하좌우에 있는 1을 모두 2로 바꾼다. 
다음칸 (다음줄)로 간다.
변화가 없을때까지 1-3을 반복한다.


처음 만나는 1을 3으로 바꾼후 1-4를 반복한다.


처음 만나는 1을 4으로 바꾼후 1-4를 반복한다.


더 이상 1이 없을때까지 위 과정을 반복한다. 


2, 3, 4, … 의 개수를 센다. 
인덱스 중 가장 큰 값에서 1을 뺀 것을 출력한다.
가장 많은 개수를 가진 인덱스를 우선으로 정렬한다.



https://www.programiz.com/online-compiler/1qb4j04T05bpI

let n = 7;

const arr = [
  [0, 1, 1, 0, 1, 0, 0],
  [0, 1, 1, 0, 1, 0, 1],
  [1, 1, 1, 0, 1, 0, 1],
  [0, 0, 0, 0, 1, 1, 1],
  [0, 1, 0, 0, 0, 0, 0],
  [0, 1, 1, 1, 1, 1, 0],
  [0, 1, 1, 1, 0, 0, 0]
  ]; 

function findOne(arr){
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length; j++) {
      if (arr[i][j] == 1) return true;  // 아직 1이 존재함 
    }
  }
  return false;
}

function solution(n, arr) {
  const arr_count = [];
  let n_count = 2;
  while (findOne(arr)) {
    // console.log("index of 1 :", arr.indexOf(1));
    
    outerFor : for (let i = 0; i < n; i++) {      // 첫번째 1 찾기 
      for (let j = 0; j < n; j++) {
        if (arr[i][j] == 1) {
          arr[i][j] = n_count;
          break outerFor;
        }
      }
    }
    
    for (let c = 0; c < n; c++) {      // n번 반복 
      for (let i = 0; i < n; i++) {       // n_count 주변의 1을 n_count 로 바꾸기 (forward)
        for (let j = 0; j < n; j++) {
          if (arr[i][j] == n_count) {
            if (arr[i][Math.min(n-1, j+1)] == 1) arr[i][Math.min(n-1, j+1)] = n_count;
            if (arr[i][Math.max(0, j-1)] == 1) arr[i][Math.max(0, j-1)] = n_count;
            if (arr[Math.min(n-1, i+1)][j] == 1) arr[Math.min(n-1, i+1)][j] = n_count;
            if (arr[Math.max(0, i-1)][j] == 1) arr[Math.max(0, i-1)][j] = n_count;
          }
        }
      }

      for (let i = n-1; i <= 0; i--) {        // n_count 주변의 1을 n_count 로 바꾸기 (backward)
        for (let j = n-1; j <= 0; j--) {
          if (arr[i][j] == n_count) {
            if (arr[i][Math.min(n-1, j+1)] == 1) arr[i][Math.min(n-1, j+1)] = n_count;
            if (arr[i][Math.max(0, j-1)] == 1) arr[i][Math.max(0, j-1)] = n_count;
            if (arr[Math.min(n-1, i+1)][j] == 1) arr[Math.min(n-1, i+1)][j] = n_count;
            if (arr[Math.max(0, i-1)][j] == 1) arr[Math.max(0, i-1)][j] = n_count;
          }
        }
      }
    }
    
    // n_count 개수 세기 
    let count = 0 ;
    for (let i = 0; i < n; i++) {
      for (let j = 0; j < n; j++) {
        if (arr[i][j] == n_count) count++;
      }
    }
    arr_count.push(count);
    arr_count.sort((a, b) => b - a);
    n_count++;  // n_count 를 1 증가 
  }

  let tmp = "";
  for (let i = 0; i < arr_count.length; i++) {
    tmp += "\n" + arr_count[i];
  }

  let answer = arr_count.length + tmp;
  return answer;
}

console.log(solution(n, arr));





https://www.programiz.com/online-compiler/9dsxXEMTnhnHE

let n = 7;

const arr = [
  [0, 1, 1, 0, 1, 0, 0],
  [0, 1, 1, 0, 1, 0, 1],
  [1, 1, 1, 0, 1, 0, 1],
  [0, 0, 0, 0, 1, 1, 1],
  [0, 1, 0, 0, 0, 0, 0],
  [0, 1, 1, 1, 1, 1, 0],
  [0, 1, 1, 1, 0, 0, 0]
  ]; 

let cnt = 0;
const size = new Array(100).fill(0);

function findOne(arr){
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr.length; j++) {
      if (arr[i][j] == 1) return true;  // 아직 1이 존재함 
    }
  }
  return false;
}

function safe(i, j) {
    return (0<=i && i<n) && (0<=j && j<n);
}

function cmp(i, j) {
    return i>j;
}

const dx = [1, 0, -1, 0];
const dy = [0, 1, 0, -1];

function dfs(a, b, c) {
    arr[a][b] = c;
    for (let i=0; i<4; i++) {
        if (safe(a+dx[i], b+dy[i]) && arr[a+dx[i]][b+dy[i]] == 1) {
            dfs(a+dx[i], b+dy[i], c);
        }
    }
}

function output(arr_count) {
  arr_count.sort((a, b) => b - a);
  let tmp = "";
  let cnt = 0;
  for (let i = 0; i < arr_count.length; i++) {
    if (arr_count[i]==0) break;
    tmp += "\n" + arr_count[i];
    cnt++;
  }
  let answer = cnt + tmp;
  return answer;
}

function solution(n, arr) {
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n; j++) {
      if (arr[i][j] == 1) {
        cnt++;
        dfs(i, j, cnt+1);
      }
    }
  }
  
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < n; j++) {
      if (arr[i][j]) {
        size[arr[i][j]-2]++;
      }
    }
  }
  
  answer = output(size); 
  return answer;
}

console.log(solution(n, arr));




